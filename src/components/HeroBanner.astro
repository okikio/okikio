---
import { Icon } from 'astro-icon/components';
import Anchor from "./Anchor.astro";
import Image from "./Image.astro";

import { slug as slugger } from "../utils/slug";

let src = "cloudinary/okikio/okiki-ojo";
let cloudinaryTest = /^cloudinary\//.test(src);
let fetchTest = /\/fetch\//.test(src);

// Netlify redirects can't handle multiple requests at once
// import.meta.env.PUBLIC_DEV.toString() == "false" && /okiki\-ojo$/.test(src) ? `https://okikio.dev/images/` : 
let origin = (`https://res.cloudinary.com/okikio-assets/image/`) + (fetchTest ? "fetch/" : "upload/");
let urlParse = (filters = "w_auto") =>
  cloudinaryTest
    ? `${origin + (fetchTest ? "" : "f_auto,q_auto:best,c_limit/" + filters + ",dpr_auto/")}${src.replace(
        /(^cloudinary\/)|fetch\//g,
        ""
      )}`
    : src;

let imageFormat = fetchTest ? "" : ".webp";
let srcset = `${urlParse(`w_auto`) + imageFormat} 100w, ${urlParse(`w_250`) + imageFormat} 200w, ${urlParse(`w_450`) + imageFormat} 600w`;
let sizes = `(max-width: 600px) 250px, (max-width: 1024px) 450px`;
---

<header class="content" role="banner" nav-section="index" data-perspective-group>
  <div class="container" id="index">
    <div class="layout">
      <div class="z-10" data-perspective="header">
        <h1>
          Hello, I am <strong class="text-primary" aria-label="Okiki Ojo">Okiki.</strong>
        </h1>
        <h2>Web Developer - Open Source Steward - Student</h2>
      </div>
      <Image
        src={src}
        alt="A black and white profile photo of Okiki Ojo, smiling, looking straight forward, behind a brick wall backdrop. He is wearing glasses, a black shirt and jacket, plus some wireless headphones, which are hanging around on his neck."
        width="250"
        height="350"
        data-nosnippet

        srcset={srcset}
        sizes={sizes}

        fetchpriority="high"
        loading="eager"
        figureAttrs={{
          "data-perspective": "image",
        }}
      />
    </div>

    <div class="social-links">
      <div class="social-layout" data-perspective="social-links">
        {() => {
          let links = {
            LinkedIn: ["In", "https://www.linkedin.com/in/okikio"],
            Twitter: ["Tw", "https://twitter.com/okikio_dev"],
            GitHub: ["Git", "https://github.com/okikio"],
            Email: ["@", "mailto:hey@okikio.dev"],
          };

          return Object.keys(links).map((name) => {
            let [shortName, href] = links[name as keyof typeof links];
            return (
              <Anchor
                class={`px-4 py-2 focus-visible:bg-primary/20 hover:text-primary umami--click--${slugger(name, { lower: false })}-side-social`}
                href={href}
              >
                <span class="full">{name}</span>
                <span class="short">{shortName}</span>
              </Anchor>
            );
          });
        }}
      </div>
    </div>

    <!-- data-perspective="scroll-down" -->
    <div id="scroll-down">
      <Anchor href="/#content" class="umami--click--scroll-down-btn" aria-label="Scroll down button">
        <strong class="text">Scroll</strong>
        <div class="icon-container">
          <Icon name="fluent:chevron-down-24-filled" />
        </div>
      </Anchor>
    </div>
  </div>
</header>

<style lang="scss">
  header {
    @apply py-0 mx-auto w-full relative overflow-hidden;
    @apply text-xl max-w-full;

    & > .container {
      @apply overflow-visible;
    }

    &.content {
      @apply max-w-[95ch];
    }

    [data-perspective] {
      @apply translate-x-0 translate-y-0;
      perspective: 7rem;
    }

    .layout {
      @apply flex flex-row items-center w-full;
      @apply relative min-h-screen;

      :global(h1) {
        @apply text-[2.8rem] leading-tight sm:text-5xl md:text-7xl lg:text-8xl font-lexend font-[900] mb-5;
      }

      h2 {
        @apply text-lg sm:text-2xl font-manrope font-[500];
        @apply mt-0 sm:leading-tight lt-xsm:max-w-[30ch];
      }

      :global(figure) {
        @apply z-0 m-0;
        @apply absolute top-1/2 right-0;
        @apply -translate-y-1/2;
        @apply w-[250px] h-[350px];
        @apply sm:w-[450px] sm:h-[350px];
      }

      :is(h1, h2) {
        @apply z-10;
      }
    }

    .social-links {
      @apply absolute top-1/2 right-0 -translate-y-1/2 z-10;
      @apply lt-sm:invisible lt-sm:pointer-events-none;

      .social-layout {
        @apply flex flex-col justify-center items-end;

        a {
          @apply flex items-center text-base;

          .full {
            @apply hidden;
          }

          .short {
            @apply block;
          }

          &:hover {
            .full {
              @apply block;
            }

            .short {
              @apply hidden;
            }
          }
        }
      }
    }

    #scroll-down {
      @apply absolute left-0 bottom-0 py-5 w-full;
      @apply flex justify-center;
      @apply text-center;

      :global(a) {
        @apply text-inherit no-underline hover:no-underline p-2;
      }

      .text {
        @apply py-3 block uppercase text-sm font-lexend;
        text-decoration: 2px underline theme("colors.primary");
        text-underline-offset: 0.2rem;
      }

      &:hover {
        .text {
          @apply text-primary;
          text-decoration-color: white;
          text-decoration-style: wavy;
        }

        .icon-container {
          outline: 4px dashed #ffff006b;
        }
      }

      .icon-container {
        @apply bg-primary text-black relative;
        @apply p-4 inline-block rounded-full;

        &::after {
          content: "";
          transform-origin: center center;
          transform: translate(-50%, -50%) scale(0.85);
          opacity: 1;

          @apply absolute top-1/2 left-1/2;
          @apply w-16 h-16 rounded-full;
          @apply border-[3px] border-primary;
          @apply z-10;

          animation: scale 1.5s ease-out 0.5s infinite both;
        }

        :global(svg) {
          @apply w-6 h-6;
        }
        
        @at-root :global(.dom-loaded) #scroll-down .icon-container :global(path) {
          @apply transition-colors duration-200 ease-in-out;
        }
      }
    }
  }

  @keyframes scale {
    from {
      transform: translate(-50%, -50%) scale(0.85);
      opacity: 1;
    }
    80%,
    100% {
      transform: translate(-50%, -50%) scale(1.3);
      opacity: 0;
    }
  }
</style>
